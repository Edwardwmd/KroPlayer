package com.wmd.kroplayer.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wmd.kroplayer.bean.VideoPlayHistoryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "video_play_history".
*/
public class VideoPlayHistoryBeanDao extends AbstractDao<VideoPlayHistoryBean, Long> {

    public static final String TABLENAME = "video_play_history";

    /**
     * Properties of entity VideoPlayHistoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property VideoName = new Property(1, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property CurrentDate = new Property(2, String.class, "currentDate", false, "CURRENT_DATE");
        public final static Property CurrentProgress = new Property(3, int.class, "currentProgress", false, "CURRENT_PROGRESS");
        public final static Property VideoSize = new Property(4, String.class, "videoSize", false, "VIDEO_SIZE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property Format = new Property(6, String.class, "format", false, "FORMAT");
        public final static Property VideoDuration = new Property(7, String.class, "videoDuration", false, "VIDEO_DURATION");
    }


    public VideoPlayHistoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoPlayHistoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"video_play_history\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"VIDEO_NAME\" TEXT," + // 1: videoName
                "\"CURRENT_DATE\" TEXT," + // 2: currentDate
                "\"CURRENT_PROGRESS\" INTEGER NOT NULL ," + // 3: currentProgress
                "\"VIDEO_SIZE\" TEXT," + // 4: videoSize
                "\"URL\" TEXT," + // 5: url
                "\"FORMAT\" TEXT," + // 6: format
                "\"VIDEO_DURATION\" TEXT);"); // 7: videoDuration
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"video_play_history\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoPlayHistoryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(2, videoName);
        }
 
        String currentDate = entity.getCurrentDate();
        if (currentDate != null) {
            stmt.bindString(3, currentDate);
        }
        stmt.bindLong(4, entity.getCurrentProgress());
 
        String videoSize = entity.getVideoSize();
        if (videoSize != null) {
            stmt.bindString(5, videoSize);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(7, format);
        }
 
        String videoDuration = entity.getVideoDuration();
        if (videoDuration != null) {
            stmt.bindString(8, videoDuration);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoPlayHistoryBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(2, videoName);
        }
 
        String currentDate = entity.getCurrentDate();
        if (currentDate != null) {
            stmt.bindString(3, currentDate);
        }
        stmt.bindLong(4, entity.getCurrentProgress());
 
        String videoSize = entity.getVideoSize();
        if (videoSize != null) {
            stmt.bindString(5, videoSize);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(7, format);
        }
 
        String videoDuration = entity.getVideoDuration();
        if (videoDuration != null) {
            stmt.bindString(8, videoDuration);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VideoPlayHistoryBean readEntity(Cursor cursor, int offset) {
        VideoPlayHistoryBean entity = new VideoPlayHistoryBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // currentDate
            cursor.getInt(offset + 3), // currentProgress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // format
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // videoDuration
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoPlayHistoryBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setVideoName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurrentDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurrentProgress(cursor.getInt(offset + 3));
        entity.setVideoSize(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFormat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoDuration(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoPlayHistoryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoPlayHistoryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoPlayHistoryBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
